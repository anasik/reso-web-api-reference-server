/*
 * This file was generated by the Gradle 'init' task.
 */
plugins {
    id 'java-library' // For creating reusable libraries
    id 'war'
    id "de.undercouch.download" version "5.4.0"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

repositories {
    // Use Gradle-compatible repositories (e.g., Maven Central)
    mavenCentral()
}

dependencies {
    // Core dependencies
    api 'org.apache.olingo:odata-server-api:4.9.0'
    api 'org.apache.olingo:odata-commons-api:4.9.0'
    api 'org.apache.olingo:odata-commons-core:4.9.0'
    api 'com.fasterxml.jackson.core:jackson-databind:2.13.0'
    api 'com.fasterxml.jackson.core:jackson-annotations:2.13.0'
    api 'com.google.code.gson:gson:2.8.9'
    api 'org.slf4j:slf4j-api:1.7.32'
    api 'com.google.code.findbugs:jsr305:3.0.2' 
    // MongoDB dependencies
    api 'org.mongodb:mongodb-driver-sync:4.4.0'
    api 'org.mongodb:bson:4.4.0'

    // MySQL dependencies
    implementation 'mysql:mysql-connector-java:8.0.27'

    // Runtime dependencies
    runtimeOnly 'org.apache.olingo:odata-server-core:4.9.0'
    runtimeOnly 'org.slf4j:slf4j-simple:1.7.32'

    // Test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'

    // Provided dependencies
    compileOnly 'javax.servlet:javax.servlet-api:4.0.1'
}

group = 'org.reso'
version = '1.0'
description = 'RESOservice'

def CERT_REPORT_17 = "RESODataDictionary-1.7.metadata-report.json"
def CERT_REPORT_20 = "RESODataDictionary-2.0.metadata-report.json"
def tempDirFile = new File(project.projectDir, "temp")
def sqlDirFile = new File(project.projectDir, "sql")
def webApiCommanderJarFile = new File(project.projectDir, "temp/web-api-commander.jar")
def jsonMetadata17File = new File(project.projectDir, CERT_REPORT_17)
def jsonMetadata20File = new File(project.projectDir, CERT_REPORT_20)


war {
    // Override the default naming 
    archiveFileName = 'core.war'
}

task prepareDirs {
    group = "setup"
    description = "Creates necessary directories (temp, sql) in the project"
    doLast {
        tempDirFile.mkdirs()
        sqlDirFile.mkdirs()
        println "Created 'temp' and 'sql' directories (if they did not exist already)."
    }
}

task downloadWebApiCommanderJar(type: Download) {
    group = "download"
    description = "Downloads web-api-commander.jar for standalone mode if not present."
    src 'https://resostuff.blob.core.windows.net/refserverfiles/web-api-commander.jar'
    dest webApiCommanderJarFile
    // Only download if SQL_HOST is not set AND if the file is missing.
    onlyIf {
        return (System.getenv("SQL_HOST") == null || System.getenv("SQL_HOST").trim().isEmpty())  && !webApiCommanderJarFile.exists()
    }
}

task downloadJsonMetadata17(type: Download) {
    group = "download"
    description = "Downloads RESODataDictionary-1.7.metadata-report.json for standalone mode if not present."
    src "https://resostuff.blob.core.windows.net/refserverfiles/$CERT_REPORT_17"
    dest jsonMetadata17File
    // Only download if SQL_HOST is not set AND if the file is missing.
    onlyIf {
        return (System.getenv("SQL_HOST") == null || System.getenv("SQL_HOST").trim().isEmpty()) && !jsonMetadata17File.exists()
    }
}

task downloadJsonMetadata20(type: Download) {
    group = "download"
    description = "Downloads RESODataDictionary-2.0.metadata-report.json for standalone mode if not present."
    src "https://resostuff.blob.core.windows.net/refserverfiles/$CERT_REPORT_20"
    dest jsonMetadata20File
    // Only download if SQL_HOST is not set AND if the file is missing.
    onlyIf {
        return (System.getenv("SQL_HOST") == null || System.getenv("SQL_HOST").trim().isEmpty()) && !jsonMetadata20File.exists()
    }
}

task copyMetadata17(type: Copy) {
    dependsOn downloadJsonMetadata17
    from("$projectDir/$CERT_REPORT_17")
    into("$buildDir/libs")
    doFirst {
        if (!jsonMetadata17File.exists()) {
            throw new GradleException("Metadata JSON not found at: ${jsonMetadata17File}")
        } 
    }
}

task copyMetadata20(type: Copy) {
    dependsOn downloadJsonMetadata20
    from("$projectDir/$CERT_REPORT_20")
    into("$buildDir/libs")
    doFirst {
        if (!jsonMetadata20File.exists()) {
            throw new GradleException("Metadata JSON not found at: ${jsonMetadata20File}")
        } 
    }
}

task packageCore {
    group = "build"
    description = "Prepares environment, downloads dependencies, builds WAR, and copies metadata."
    dependsOn prepareDirs, war, downloadWebApiCommanderJar, downloadJsonMetadata17, downloadJsonMetadata20, copyMetadata17, copyMetadata20
    doLast {
        println "PackageCore complete. Check build/libs for core.war and metadata JSON."
    }
}

test {
    useJUnitPlatform()
    environment "LOOKUP_TYPE", "STRING"
    environment "DB_TYPE", "mongodb"
}

tasks.test {
    useJUnitPlatform()
    // Exclude ExpandUtilsTest to run it only when needed
    exclude '**/ExpandUtilsTest.class'
}

task runExpandUtilsTest(type: Test) {
    useJUnitPlatform()
    // Run only ExpandUtilsTest
    include '**/ExpandUtilsTest.class'
}

// Ensure compatibility with Java 8
java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

